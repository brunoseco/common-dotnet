using System;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Common.Domain.Interfaces;
using Common.Infrastructure.Cache;
using System.Collections.Generic;
using Common.Models;
using Common.Interfaces;
using <#namespace#>.Dto.<#boundedContext#>;
using <#namespace#>.Filters;
using <#namespace#>.Infrastructure.ORM.Contexto;
using Common.Infrastructure.ORM.Repositories;
using <#namespace#>.Domain.Models.<#boundedContext#>;

namespace Cna.Erp.Query.Application
{
    public partial class <#inheritClassName#>App 
    {

		public void Init(string token)
        {
			this.cache = ConfigContainer.Container().GetInstance<ICache>();
            this.log = ConfigContainer.Container().GetInstance<ILog>();
            var context = new DbContext<#boundedContext#>(log);
            this.rep<#className#> = new Repository<<#className#>, DbContext<#boundedContext#>>(context, log);
            this.<#className#> = new <#className#>(this.rep<#className#>, cache);
            this.<#className#>.SetToken(token);
		}

		private IEnumerable<Common.Dto.DtoBase> MapperDomainToResult(<#className#>Filter filter, PaginateResult<<#className#>> dataList)
        {
            var result = filter.IsOnlySummary ? null : AutoMapper.Mapper.Map<IEnumerable<<#className#>>, IEnumerable<Common.Dto.DtoBase>>(dataList.ResultPaginatedData);
            return result;
        }

		private IEnumerable<Common.Dto.DtoBase> MapperDomainToReport(<#className#>Filter filter, PaginateResult<<#className#>> dataList)
        {
            var result = filter.IsOnlySummary ? null : AutoMapper.Mapper.Map<IEnumerable<<#className#>>, IEnumerable<Common.Dto.DtoBase>>(dataList.ResultPaginatedData);
            return result;
        }

		
		private Common.Dto.DtoBase MapperDomainToDtoDetails(<#className#> data,  Common.Dto.DtoBase dto)
        {
            var result =  AutoMapper.Mapper.Map<<#className#>, Common.Dto.DtoBase>(data);
            return result;
        }

	}
}
