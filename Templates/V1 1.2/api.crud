using Common.API;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web;
using <#namespaceDomainSource#>.Filters;
using Common.Interfaces;
using <#namespace#>.Dto;
using <#namespace#>.Application;
using System.Threading.Tasks;

namespace <#namespace#>.Api.Controllers
{
    public class <#className#>Controller : ApiController
    {
        private HttpResult<<#className#>Dto> result;
		private HelperHttpLog httpLog;
		private <#className#>App app;

        public <#className#>Controller()
        {
			this.httpLog = new HelperHttpLog();
            this.httpLog.LogRequestIni();
            this.result = new HttpResult<<#className#>Dto>();
        }

<#ApiGet#>

		[ActionName("DefaultAction")]
		public HttpResponseMessage Get([FromUri]<#className#>Filter filters)
        {
			var result = new HttpResult<<#className#>Dto>();

            try
            {
                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
				var searchResult = this.app.GetByFilters(filters);
                result.Summary = searchResult.Summary;
				result.Warnings = this.app.GetDomainWarning(filters);
                result.Success(searchResult.DataList);
                return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, filters);
				return Request.CreateResponse(result.StatusCode, result);
            }
        }

		
		[ActionName("GetReport")]
		public HttpResponseMessage GetReport([FromUri]<#className#>Filter filters)
        {
			var result = new HttpResult<<#className#>Dto>();

            try
            {
                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
				var searchResult = this.app.GetReport(filters);
                result.Summary = searchResult.Summary;
				result.Warnings = this.app.GetDomainWarning(filters);
                result.Success(searchResult.DataList);
                return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, filters);
				return Request.CreateResponse(result.StatusCode, result);
            }
        }

		[ActionName("DefaultAction")]
		public HttpResponseMessage Post([FromBody]<#className#>DtoSpecialized model)
        {
            try
            {
                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
                var returnModel = this.app.Save(model);
				result.Warnings = this.app.GetDomainWarning();
				result.Confirms = this.app.GetDomainConfirms();
                result.Success(returnModel);
				this.httpLog.LogSerialize(model);
				return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, model);
				return Request.CreateResponse(result.StatusCode, result);
            }

        }

		
		[ActionName("DefaultAction")]
		public HttpResponseMessage Put([FromBody]<#className#>DtoSpecialized model)
        {
            try
            {
                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
                var returnModel = this.app.SavePartial(model);
				result.Warnings = this.app.GetDomainWarning();
				result.Confirms = this.app.GetDomainConfirms();
                result.Success(returnModel);
				this.httpLog.LogSerialize(model);
				return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, model);
				return Request.CreateResponse(result.StatusCode, result);
            }

        }
		
		[ActionName("DefaultAction")]
		public HttpResponseMessage Delete([FromUri]<#className#>Dto model)
        {
            try
            {
                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
                this.app.Delete(model);
				this.result.Warnings = this.app.GetDomainWarning();
                var result = this.result.Success();
				return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, model);
				return Request.CreateResponse(result.StatusCode, result);
            }
        }
		
		[ActionName("PostMany")]
		public HttpResponseMessage PostMany([FromBody]IEnumerable<<#className#>DtoSpecialized> models)
        {
            try
            {
                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
                var returnModel = this.app.Save(models);
				result.Warnings = this.app.GetDomainWarning();
				result.Confirms = this.app.GetDomainConfirms();
                result.Success(returnModel);
				this.httpLog.LogSerialize(models);
				return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, models);
				return Request.CreateResponse(result.StatusCode, result);
            }

        }

		[ActionName("GetDataListCustom")]
        public HttpResponseMessage GetDataListCustom([FromUri]<#className#>Filter filters)
		{
			var result = new HttpResult<object>();

			try
			{
				var token = HelperAuth.GetHeaderToken();
				this.app = new <#className#>App(token);
                var searchResult = this.app.GetDataListCustom(filters);
                result.Summary = searchResult.Summary;
				result.Warnings = this.app.GetDomainWarning(filters);
                result.Success(searchResult.DataList);
                return Request.CreateResponse(result.StatusCode, result);

			}
			catch (Exception ex)
			{
				result.ReturnCustomException(ex, filters);
				return Request.CreateResponse(result.StatusCode, result);
			}

		}

		[ActionName("GetDataCustom")]
        public HttpResponseMessage GetDataCustom([FromUri]<#className#>Filter filters)
		{
			var result = new HttpResult<object>();

			try
			{
				var token = HelperAuth.GetHeaderToken();
				this.app = new <#className#>App(token);
                var data = this.app.GetDataCustom(filters);
				this.app.Dispose();
				result.Warnings = this.app.GetDomainWarning(filters);
                result.Success(data);
				return Request.CreateResponse(result.StatusCode, result);

			}
			catch (Exception ex)
			{
				result.ReturnCustomException(ex, filters);
				return Request.CreateResponse(result.StatusCode, result);
			}

		}

		[ActionName("GetByModel")]
		public HttpResponseMessage GetByModel([FromUri]<#className#>Dto model)
        {
            var result = new HttpResult<<#className#>Dto>();

            try
            {

                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
                var searchResult = this.app.Get(model);
				result.Warnings = this.app.GetDomainWarning();
                result.Success(searchResult);
				return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, model);
				return Request.CreateResponse(result.StatusCode, result);
            }

        }

		[ActionName("GetDetails")]
		public HttpResponseMessage GetDetails([FromUri]<#className#>Dto model)
        {
            var result = new HttpResult<<#className#>Dto>();

            try
            {

                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
                var searchResult = this.app.GetDetails(model);
				result.Warnings = this.app.GetDomainWarning();
                result.Success(searchResult);
				return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, model);
				return Request.CreateResponse(result.StatusCode, result);
            }

        }

		[ActionName("GetTotalByFilters")]
        public HttpResponseMessage GetTotalByFilters([FromUri]<#className#>Filter filters)
        {
            var result = new HttpResult<int>();

            try
            {
                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
                var searchResult = this.app.GetTotalByFilters(filters);
				result.Warnings = this.app.GetDomainWarning(filters);
                result.Success(searchResult);
                return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, filters);
				return Request.CreateResponse(result.StatusCode, result);
            }
        }

		[ActionName("GetWarnings")]
        public HttpResponseMessage GetWarnings([FromUri]<#className#>Filter filters)
        {
            var result = new HttpResult<<#className#>Dto>();

            try
            {
                var token = HelperAuth.GetHeaderToken();
                this.app = new <#className#>App(token);
                result.Warnings = this.app.GetDomainWarning(filters);
                result.Success();
                return Request.CreateResponse(result.StatusCode, result);

            }
            catch (Exception ex)
            {
                result.ReturnCustomException(ex, filters);
                return Request.CreateResponse(result.StatusCode, result);

            }

        }

		protected override void Dispose(bool disposing)
        {
			if (this.app.IsNotNull()) this.app.Dispose();
            this.httpLog.LogRequestEnd();
            base.Dispose(disposing);
        }
    }
}
