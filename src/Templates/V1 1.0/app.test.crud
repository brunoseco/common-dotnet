using System;
using System.Linq;
using System.Data;
using System.Threading;
using System.Diagnostics;
using System.Globalization;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Common.Domain;
using Common.Models;
using Common.Test;
using <#namespaceDomainSource#>.Filters;
using <#namespace#>.Dto;
<#namespaceReleted#>
<#namespaceReletedTest#>
using System.Configuration;
using Common.Authentication.Dto;
using Common.Domain.CustomExceptions;
using <#namespaceRoot#>.Custom.Uri.Api;
using <#namespaceRoot#>.Auth.Infrastructure.User;

namespace <#namespace#>.Application.Test
{
    [TestClass]
    public partial class UnitTest<#className#>App : TestBase
    {
		public override void Auth()
        {

            var TesterPassword = ConfigurationManager.AppSettings["TesterPassword"];
            var TesterEmail = ConfigurationManager.AppSettings["TesterEmail"];

            var Account = new Account();
            var credential = new CredentialDto { Email = TesterEmail, Password = TesterPassword };
			this.token = Account.Login(credential).Token;

        }

        [TestMethod]
        public void WhenInsertedNewRowsThenReciveNewId()
        {
            var app = new <#className#>App(base.token);
            var data = app.Save(Helper<#className#>Moq.MoqObject(base.token));
            Assert.IsNotNull(data);
            app.Dispose();
        }

		[TestMethod]
        public void WhenUpdateExistsRowsThenReciveUpdatedModel()
        {
			var app = new <#className#>App(base.token);
			var newDado = app.Save(Helper<#className#>Moq.MoqObject(base.token));
            var data = app.Save(Helper<#className#>Moq.MoqObject(newDado,base.token));
            Assert.IsNotNull(data);
            app.Dispose();
           
        }

		[TestMethod]
        public void WhenGetFilteredRowsThenReciveMoreThanZeroRows()
        {
			var app = new <#className#>App(base.token);
			var newDado = app.Save(Helper<#className#>Moq.MoqObject(base.token));

          	var result = app.GetByFilters(new <#className#>Filter 
            {
                IsPagination = true
            });

            Assert.IsTrue(result.DataList.Count() > 0);
            app.Dispose();
        }

		[TestMethod]
        public void WhenGetByUnitThenReciveOnlyRow()
        {
			var app = new <#className#>App(base.token);
			var newDado = app.Save(Helper<#className#>Moq.MoqObject(base.token));
            var data = app.Get(newDado);
            Assert.IsNotNull(data);
            app.Dispose();
        }

		[TestMethod]
        public void WhenDeleteByUnitThenNotFounRow()
        {
			var app = new <#className#>App(base.token);

            try
            {
                var newDado = app.Save(Helper<#className#>Moq.MoqObject(base.token));
                app.Delete(newDado);
                var data = app.Get(newDado);
                Assert.IsNull(data);

            }
            catch (DataException ex)
            {
                Assert.IsTrue(ContainsConflictedDelete(ex.InnerException.InnerException.Message));
            }

            app.Dispose();
        }



	}
}
