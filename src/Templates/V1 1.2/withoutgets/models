using System;
using System.Linq;
using Common.Domain;
using Common.Domain.Interfaces;
using System.Collections.Generic;
using System.Linq.Expressions;
using <#namespaceDomainSource#>.Filters;
using Common.Models;

namespace <#namespace#>.Domain
{
	public abstract class <#className#>Base : ConfigDomain<#module#>, IDisposable
	{
        internal IRepository<<#className#>> rep;
		private ICache cache;
		protected ValidationHelper validationHelper;

		public <#className#>() { }

        public <#className#>Base(IRepository<<#className#>> rep, ICache cache):base()
        {
            this.rep = rep;
            this.cache = cache;
			<#toolName#>
			this.Init();
			base.Config(this.cache);
			this.validationHelper = new ValidationHelper();
        }
	
<#property#>
  
		public virtual IEnumerable<string> GetDomainWarning(<#className#>Filter filters)
        {
            return this.validationHelper.GetDomainWarning();
        }

		public virtual IEnumerable<ValidationConfirm> GetDomainConfirms(<#className#>Filter filters)
        {
            return this.validationHelper.GetDomainConfirms();
        }

		protected bool Confirm(<#className#> model, <#className#> modelOld)
        {
            return true;
        }

	}
}